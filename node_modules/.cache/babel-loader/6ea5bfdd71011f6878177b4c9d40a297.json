{"ast":null,"code":"var _jsxFileName = \"C:\\\\take-home-frontend\\\\src\\\\components\\\\Giphy.js\";\nimport React, { Component } from 'react';\nimport SearchBar from '../components/SearchBar';\nimport MainContent from '../components/MainContent';\nimport BottomScrollListener from 'react-bottom-scroll-listener';\nimport Logo from '../components/Logo';\nimport '../stylesheets/Giphy.css';\n/*\r\n* Main Page of Giphy App \r\n*/\n\nclass Giphy extends Component {\n  constructor() {\n    super();\n    this.state = {\n      trending_visible: true,\n      active_gif: null,\n      is_gif: true,\n      search_content: [],\n      randoms: [],\n      active_title: '',\n      api_key: 'JnDTtMn3Qf95yDibTNoTlN5PqaxSSHeB'\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleSubmitAndActive = this.handleSubmitAndActive.bind(this);\n    this.setMainState = this.setMainState.bind(this);\n    this.handleActiveGif = this.handleActiveGif.bind(this);\n    this.setRandoms = this.setRandoms.bind(this);\n    this.setGif = this.setGif.bind(this);\n    this.callback = this.callback.bind(this);\n  }\n\n  componentWillMount() {\n    this.setRandoms(true, true, 0);\n  }\n  /*\r\n  *  Search Endpoint with random string and rating\r\n  *  Parameters:\r\n  *  (is_gif) - boolean for deciding Gif or Sticker request \r\n  *  (is_new) - boolean for setting new word or using current \r\n  *  (offset) - amount to offset search by   \r\n  */\n\n\n  setRandoms(is_gif, is_new, offset) {\n    let random_word = this.state.active_title;\n\n    if (is_new === true) {\n      random_word = this.getRandom();\n    }\n\n    let path = 'https://api.giphy.com/v1/';\n\n    if (is_gif === true) {\n      path += 'gifs';\n    } else {\n      path += 'stickers';\n    }\n\n    path += '/search?api_key=' + this.state.api_key;\n    path += '&q=' + random_word;\n    path += '&offset=' + offset;\n    fetch(path, {\n      mode: 'cors'\n    }).then(results => {\n      return results.json();\n    }).then(data => {\n      this.setState({\n        active_title: random_word,\n        randoms: offset === 0 ? data.data : this.state.randoms.concat(data.data)\n      });\n    });\n  }\n  /*\r\n  * Handle Submit for Search Endpoint \r\n  * (str) - search string \r\n  * (is_gif) - boolean for sending Gif or Sticker request  \r\n  * (offset) - integer to offset search by \r\n  */\n\n\n  handleSubmit(str, is_gif, offset) {\n    let path = 'https://api.giphy.com/v1/';\n\n    if (is_gif === true) {\n      path += 'gifs';\n    } else {\n      path += 'stickers';\n    }\n\n    path += '/search?api_key=' + this.state.api_key;\n    path += '&q=' + str;\n    path += '&offset=' + offset;\n    fetch(path).then(results => {\n      return results.json();\n    }).then(data => {\n      this.setState({\n        trending_visible: false,\n        search_content: offset === 0 ? data.data : this.state.search_content.concat(data.data),\n        active_title: str\n      });\n    });\n  }\n  /*\r\n  * Handle Submit AND Active Gif for Search Endpoint \r\n  */\n\n\n  handleSubmitAndActive(event, str, is_gif) {\n    event.preventDefault();\n    let path = 'https://api.giphy.com/v1/';\n\n    if (is_gif === true) {\n      path += 'gifs';\n    } else {\n      path += 'stickers';\n    }\n\n    path += '/search?api_key=' + this.state.api_key;\n    path += '&q=' + str;\n    fetch(path).then(results => {\n      return results.json();\n    }).then(data => {\n      const rand = Math.floor(Math.random() * (data.data.length - 1));\n\n      if (data.data.length === 0) {\n        alert('Couldn\\'t find any GIFS or Stickers');\n      } else {\n        this.setState({\n          trending_visible: false,\n          search_content: data.data,\n          active_gif: data.data[rand],\n          active_title: this.titleToSearchable(data.data[rand])\n        });\n      }\n    });\n  }\n  /*\r\n  * Get Random String \r\n  * Used in GifRandom \r\n  */\n\n\n  getRandom() {\n    var randomWords = require('random-words');\n\n    return randomWords();\n  }\n  /*\r\n  * Sets if Gif or Sticker\r\n  * Used in Main Content \r\n  */\n\n\n  setGif(boolean) {\n    this.setState({\n      is_gif: boolean\n    });\n  }\n  /*\r\n  * Sets active_gif in Giphy to a GIF object \r\n  */\n\n\n  handleActiveGif(pic) {\n    this.setState({\n      active_gif: pic,\n      active_title: this.titleToSearchable(pic),\n      trending_visible: false\n    });\n  }\n  /*\r\n  * Convert Gif Object to a searchable Title \r\n  */\n\n\n  titleToSearchable(pic) {\n    var title = pic.title.toLowerCase().trim();\n\n    if (title === '') {\n      var slug = pic.slug.toLowerCase().trim().split('-');\n      /*\r\n      * Slugs have interesting search terms \r\n      * but also includes random ID's \r\n      */\n\n      slug = slug.filter(function (str) {\n        return !/\\d/.test(str);\n      });\n\n      if (slug.length === 1) {\n        return pic.username;\n      }\n\n      return slug.join(' ');\n    }\n\n    var title_arr = title.split(\" \");\n    var without_gif = title_arr.slice(0, title_arr.indexOf('gif'));\n    return without_gif.join(' ');\n  }\n  /*\r\n  * Sets layout and content to Main Page state \r\n  */\n\n\n  setMainState() {\n    this.setState({\n      trending_visible: true,\n      main_content: [],\n      active_gif: null,\n      active_title: '',\n      search_content: [],\n      is_gif: true\n    });\n    this.componentWillMount();\n  }\n  /*\r\n  * Used in BottomScrollListener \r\n  * Make a request and add to content list  \r\n  */\n\n\n  callback() {\n    if (this.state.active_gif !== null) {\n      this.handleSubmit(this.state.active_title, this.state.is_gif === true, this.state.search_content.length);\n    } else {\n      this.setRandoms(this.state.is_gif === true, false, this.state.randoms.length);\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"giphy\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    }, React.createElement(Logo, {\n      setMainState: this.setMainState,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216\n      },\n      __self: this\n    }), React.createElement(SearchBar, {\n      handleSubmit: this.handleSubmit,\n      handleSubmitAndActive: this.handleSubmitAndActive,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    }), React.createElement(MainContent, {\n      setGif: this.setGif,\n      is_gif: this.state.is_gif,\n      setRandoms: this.setRandoms,\n      titleToSearchable: this.titleToSearchable,\n      randoms: this.state.randoms,\n      api_key: this.state.api_key,\n      active_title: this.state.active_title,\n      handleSubmit: this.handleSubmit,\n      dimensions: this.props.dimensions,\n      search_content: this.state.search_content,\n      handleActiveGif: this.handleActiveGif,\n      active_gif: this.state.active_gif,\n      trending_visible: this.state.trending_visible,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    }), React.createElement(BottomScrollListener, {\n      onBottom: this.callback,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Giphy;","map":{"version":3,"sources":["C:\\take-home-frontend\\src\\components\\Giphy.js"],"names":["React","Component","SearchBar","MainContent","BottomScrollListener","Logo","Giphy","constructor","state","trending_visible","active_gif","is_gif","search_content","randoms","active_title","api_key","handleSubmit","bind","handleSubmitAndActive","setMainState","handleActiveGif","setRandoms","setGif","callback","componentWillMount","is_new","offset","random_word","getRandom","path","fetch","mode","then","results","json","data","setState","concat","str","event","preventDefault","rand","Math","floor","random","length","alert","titleToSearchable","randomWords","require","boolean","pic","title","toLowerCase","trim","slug","split","filter","test","username","join","title_arr","without_gif","slice","indexOf","main_content","render","props","dimensions"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport SearchBar from '../components/SearchBar'; \r\nimport MainContent from '../components/MainContent';\r\nimport BottomScrollListener from 'react-bottom-scroll-listener';\r\nimport Logo from '../components/Logo';\r\nimport '../stylesheets/Giphy.css';\r\n\r\n/*\r\n* Main Page of Giphy App \r\n*/\r\nclass Giphy extends Component {\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\ttrending_visible: true,\r\n\t\t\tactive_gif: null,  \r\n\t\t\tis_gif: true,\r\n\t\t\tsearch_content: [],\r\n\t\t\trandoms: [],\r\n\t\t\tactive_title: '',\r\n\t\t\tapi_key: 'JnDTtMn3Qf95yDibTNoTlN5PqaxSSHeB',\r\n\t\t}\r\n\r\n\t\tthis.handleSubmit = this.handleSubmit.bind(this);\r\n\t\tthis.handleSubmitAndActive = this.handleSubmitAndActive.bind(this);\r\n\t\tthis.setMainState = this.setMainState.bind(this);\r\n\t\tthis.handleActiveGif = this.handleActiveGif.bind(this);\r\n\t\tthis.setRandoms = this.setRandoms.bind(this);\r\n\t\tthis.setGif = this.setGif.bind(this);\r\n\t\tthis.callback = this.callback.bind(this);\r\n\t}\r\n\r\n\tcomponentWillMount() {\r\n\t\tthis.setRandoms(true, true, 0);\r\n\t}\r\n\r\n\t/*\r\n\t*  Search Endpoint with random string and rating\r\n\t*  Parameters:\r\n\t*  (is_gif) - boolean for deciding Gif or Sticker request \r\n\t*  (is_new) - boolean for setting new word or using current \r\n\t*  (offset) - amount to offset search by   \r\n\t*/\r\n\tsetRandoms(is_gif, is_new, offset) {\r\n\t\tlet random_word = this.state.active_title;\r\n\t\tif (is_new === true) {\r\n\t\t\trandom_word = this.getRandom();\r\n\t\t}\r\n\t\tlet path = 'https://api.giphy.com/v1/';\r\n\t\tif (is_gif === true) {\r\n\t\t\tpath += 'gifs';\r\n\t\t} else {\r\n\t\t\tpath += 'stickers';\r\n\t\t}\r\n\t\tpath += '/search?api_key=' + this.state.api_key;\r\n\t\tpath += '&q=' + random_word;\r\n\t\tpath += '&offset=' + offset; \r\n\r\n\t    fetch(path, {mode: 'cors'})\r\n\t\t.then(results =>{\r\n\t\t\treturn results.json();\r\n\t\t}).then(data=> {\r\n\t\t\tthis.setState({\r\n\t\t\t\tactive_title: random_word,\r\n\t\t\t\trandoms: offset === 0 ? data.data : this.state.randoms.concat(data.data),\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\t/*\r\n\t* Handle Submit for Search Endpoint \r\n\t* (str) - search string \r\n\t* (is_gif) - boolean for sending Gif or Sticker request  \r\n\t* (offset) - integer to offset search by \r\n\t*/\r\n\thandleSubmit(str, is_gif, offset) {\r\n\t\tlet path = 'https://api.giphy.com/v1/' \r\n\t\tif (is_gif === true) {\r\n\t\t\tpath += 'gifs'\r\n\t\t} else {\r\n\t\t\tpath += 'stickers'\r\n\t\t}\r\n\t\tpath += '/search?api_key=' + this.state.api_key\r\n\t\tpath += '&q=' + str;\r\n\t\tpath += '&offset=' + offset; \r\n\t    fetch(path)\r\n\t\t.then(results =>{\r\n\t\t\treturn results.json();\r\n\t\t}).then(data=> {\r\n\t\t\tthis.setState({\r\n\t\t\t\ttrending_visible: false,\r\n\t\t\t\tsearch_content: offset === 0 ? data.data : this.state.search_content.concat(data.data),\r\n\t\t\t\tactive_title: str, \r\n\t\t\t});\r\n\t\t})\r\n\t}\r\n\r\n\r\n\t/*\r\n\t* Handle Submit AND Active Gif for Search Endpoint \r\n\t*/\r\n\thandleSubmitAndActive(event, str, is_gif) {\r\n\t\tevent.preventDefault();\r\n\t\tlet path = 'https://api.giphy.com/v1/' \r\n\t\tif (is_gif === true) {\r\n\t\t\tpath += 'gifs'\r\n\t\t} else {\r\n\t\t\tpath += 'stickers'\r\n\t\t}\r\n\t\tpath += '/search?api_key=' + this.state.api_key\r\n\t\tpath += '&q=' + str;\r\n\t    fetch(path)\r\n\t\t.then(results =>{\r\n\t\t\treturn results.json();\r\n\t\t}).then(data=> {\r\n\t\t\tconst rand = Math.floor(Math.random() * (data.data.length -1));\r\n\t\t\tif (data.data.length === 0) {\r\n\t\t\t\talert('Couldn\\'t find any GIFS or Stickers');\r\n\t\t\t} else {\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\ttrending_visible: false,\r\n\t\t\t\t\tsearch_content: data.data,\r\n\t\t\t\t\tactive_gif: data.data[rand],\r\n\t\t\t\t\tactive_title: this.titleToSearchable(data.data[rand]), \r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n\r\n\r\n\t/*\r\n\t* Get Random String \r\n\t* Used in GifRandom \r\n\t*/\r\n\tgetRandom() {\r\n\t\tvar randomWords = require('random-words');\r\n\t\treturn randomWords();\r\n\t}\r\n\r\n\t/*\r\n\t* Sets if Gif or Sticker\r\n\t* Used in Main Content \r\n\t*/\r\n\tsetGif(boolean) {\r\n\t\tthis.setState({\r\n\t\t\tis_gif: boolean,\r\n\t\t});\r\n\t}\r\n\r\n\t/*\r\n\t* Sets active_gif in Giphy to a GIF object \r\n\t*/\t\r\n\thandleActiveGif(pic) {\r\n\t\tthis.setState({\r\n\t\t\tactive_gif: pic,\r\n\t\t\tactive_title: this.titleToSearchable(pic),\r\n\t\t\ttrending_visible: false,\r\n\t\t});\r\n\t}\r\n\r\n\t/*\r\n\t* Convert Gif Object to a searchable Title \r\n\t*/\r\n\ttitleToSearchable(pic){\r\n\t\tvar title = pic.title.toLowerCase().trim();\r\n\t\tif (title === '') {\r\n\t\t\tvar slug = pic.slug.toLowerCase().trim().split('-');\r\n\t\t\t/*\r\n\t\t\t* Slugs have interesting search terms \r\n\t\t\t* but also includes random ID's \r\n\t\t\t*/\r\n\t\t\tslug = slug.filter(function(str){return !(/\\d/.test(str))})\r\n\t\t\tif (slug.length === 1) {\r\n\t\t\t\treturn pic.username;\r\n\t\t\t}\r\n\t\t\treturn slug.join(' ');\r\n\t\t}\r\n\t\tvar title_arr = title.split(\" \"); \r\n\t\tvar without_gif = title_arr.slice(0, title_arr.indexOf('gif'));\r\n\t\treturn without_gif.join(' ');\r\n\t}\r\n\r\n\t/*\r\n\t* Sets layout and content to Main Page state \r\n\t*/\r\n\tsetMainState() {\r\n\t\tthis.setState({\r\n\t\t\ttrending_visible: true,\r\n\t\t\tmain_content: [],\r\n\t\t\tactive_gif: null,\r\n\t\t\tactive_title: '',\r\n\t\t\tsearch_content: [],\r\n\t\t\tis_gif: true,\r\n\t\t});\r\n\t\tthis.componentWillMount();\r\n\t}\r\n\r\n\r\n\t/*\r\n\t* Used in BottomScrollListener \r\n\t* Make a request and add to content list  \r\n\t*/\r\n\tcallback() { \r\n\t\tif (this.state.active_gif !== null) {\r\n\t\t\tthis.handleSubmit(this.state.active_title, this.state.is_gif === true, this.state.search_content.length)\r\n\t\t} else {\r\n\t\t\tthis.setRandoms(this.state.is_gif === true, false, this.state.randoms.length)\r\n\t\t}\r\n\t}\r\n\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"giphy\">\r\n\t\t\t\t<Logo setMainState={this.setMainState}/>\r\n\t\t    \t<SearchBar handleSubmit={this.handleSubmit} handleSubmitAndActive={this.handleSubmitAndActive}/>\r\n\t\t    \t<MainContent setGif={this.setGif} is_gif={this.state.is_gif} setRandoms={this.setRandoms} titleToSearchable={this.titleToSearchable} randoms={this.state.randoms} api_key={this.state.api_key} active_title={this.state.active_title} handleSubmit={this.handleSubmit} dimensions={this.props.dimensions} search_content={this.state.search_content} handleActiveGif={this.handleActiveGif} active_gif={this.state.active_gif} trending_visible={this.state.trending_visible}/>\r\n\t\t\t\t<BottomScrollListener onBottom={this.callback} />\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Giphy;\r\n"]},"metadata":{},"sourceType":"module"}